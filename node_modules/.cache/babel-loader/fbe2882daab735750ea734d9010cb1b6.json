{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/hoa/Desktop/source/React/temo-ui/src/components/Button/Button.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport \"./button.scss\";\n\nconst Button = props => {\n  _s();\n\n  const {\n    disable,\n    innerRef,\n    clickEvent,\n    shape,\n    type,\n    style\n  } = props;\n  const colorType = [\"primary\", \"success\", \"warning\", \"danger\", \"info\"];\n  const colorTypeToHex = [\"#409eff\", \"#67c23a\", \"#e6a23c\", \"#f56c6c\", \"#909399\"];\n  const Ref = useRef(innerRef);\n\n  const transferTypeOToColor = () => {\n    let findColorTypeIndex = colorType.indexOf(type);\n    let btnType;\n\n    if (type && findColorTypeIndex > -1) {\n      btnType = colorTypeToHex[findColorTypeIndex];\n    } else if (type && findColorTypeIndex === -1) {\n      btnType = type;\n    } else {\n      btnType = \"#fff\";\n    }\n\n    return btnType;\n  };\n\n  const TextColor = () => {\n    let textColor;\n\n    if (type) {\n      textColor = \"#fff\";\n    } else {\n      textColor = \"#606266\";\n    }\n\n    return textColor;\n  };\n\n  const renderTypeColorByShape = () => {};\n\n  const renderTextColorByShape = () => {};\n\n  const onClick = e => {\n    if (disable && disable === true) {\n      e.preventDefault();\n      return;\n    }\n\n    if (clickEvent) {\n      return onClick(e);\n    }\n  };\n\n  const handleClick = () => {\n    onClick();\n  };\n\n  useEffect(() => {\n    console.log(props);\n  });\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: {\n      background: `${renderTypeColorByShape()}`,\n      color: ` ${renderTextColorByShape()}`,\n      ...style\n    },\n    className: `button ${shape || \"\"}`,\n    onClick: onClick,\n    ref: Ref,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Button, \"i/EB239uUpbsq6o+/PlZ0sDE+7I=\");\n\n_c = Button;\nexport default Button; //props background color,  content, hover background, size,\n//icon\n//shape -> border, color\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/home/hoa/Desktop/source/React/temo-ui/src/components/Button/Button.js"],"names":["React","useRef","useEffect","Button","props","disable","innerRef","clickEvent","shape","type","style","colorType","colorTypeToHex","Ref","transferTypeOToColor","findColorTypeIndex","indexOf","btnType","TextColor","textColor","renderTypeColorByShape","renderTextColorByShape","onClick","e","preventDefault","handleClick","console","log","background","color","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAO,eAAP;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,UAArB;AAAiCC,IAAAA,KAAjC;AAAwCC,IAAAA,IAAxC;AAA8CC,IAAAA;AAA9C,MAAwDN,KAA9D;AACA,QAAMO,SAAS,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,QAAlC,EAA4C,MAA5C,CAAlB;AACA,QAAMC,cAAc,GAAG,CACrB,SADqB,EAErB,SAFqB,EAGrB,SAHqB,EAIrB,SAJqB,EAKrB,SALqB,CAAvB;AAOA,QAAMC,GAAG,GAAGZ,MAAM,CAACK,QAAD,CAAlB;;AACA,QAAMQ,oBAAoB,GAAG,MAAM;AACjC,QAAIC,kBAAkB,GAAGJ,SAAS,CAACK,OAAV,CAAkBP,IAAlB,CAAzB;AACA,QAAIQ,OAAJ;;AACA,QAAIR,IAAI,IAAIM,kBAAkB,GAAG,CAAC,CAAlC,EAAqC;AACnCE,MAAAA,OAAO,GAAGL,cAAc,CAACG,kBAAD,CAAxB;AACD,KAFD,MAEO,IAAIN,IAAI,IAAIM,kBAAkB,KAAK,CAAC,CAApC,EAAuC;AAC5CE,MAAAA,OAAO,GAAGR,IAAV;AACD,KAFM,MAEA;AACLQ,MAAAA,OAAO,GAAG,MAAV;AACD;;AACD,WAAOA,OAAP;AACD,GAXD;;AAYA,QAAMC,SAAS,GAAG,MAAM;AACtB,QAAIC,SAAJ;;AACA,QAAIV,IAAJ,EAAU;AACRU,MAAAA,SAAS,GAAG,MAAZ;AACD,KAFD,MAEO;AACLA,MAAAA,SAAS,GAAG,SAAZ;AACD;;AACD,WAAOA,SAAP;AACD,GARD;;AAUA,QAAMC,sBAAsB,GAAG,MAAM,CAAE,CAAvC;;AACA,QAAMC,sBAAsB,GAAG,MAAM,CAAE,CAAvC;;AACA,QAAMC,OAAO,GAAIC,CAAD,IAAO;AACrB,QAAIlB,OAAO,IAAIA,OAAO,KAAK,IAA3B,EAAiC;AAC/BkB,MAAAA,CAAC,CAACC,cAAF;AACA;AACD;;AACD,QAAIjB,UAAJ,EAAgB;AACd,aAAOe,OAAO,CAACC,CAAD,CAAd;AACD;AACF,GARD;;AASA,QAAME,WAAW,GAAG,MAAM;AACxBH,IAAAA,OAAO;AACR,GAFD;;AAGApB,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,OAAO,CAACC,GAAR,CAAYvB,KAAZ;AACD,GAFQ,CAAT;AAIA,sBACE;AACE,IAAA,KAAK,EAAE;AACLwB,MAAAA,UAAU,EAAG,GAAER,sBAAsB,EAAG,EADnC;AAELS,MAAAA,KAAK,EAAG,IAAGR,sBAAsB,EAAG,EAF/B;AAGL,SAAGX;AAHE,KADT;AAME,IAAA,SAAS,EAAG,UAASF,KAAK,IAAI,EAAG,EANnC;AAOE,IAAA,OAAO,EAAEc,OAPX;AAQE,IAAA,GAAG,EAAET,GARP;AAAA,cAUGiB;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAjED;;GAAM3B,M;;KAAAA,M;AAmEN,eAAeA,MAAf,C,CAEA;AACA;AACA","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport \"./button.scss\";\n\nconst Button = (props) => {\n  const { disable, innerRef, clickEvent, shape, type, style } = props;\n  const colorType = [\"primary\", \"success\", \"warning\", \"danger\", \"info\"];\n  const colorTypeToHex = [\n    \"#409eff\",\n    \"#67c23a\",\n    \"#e6a23c\",\n    \"#f56c6c\",\n    \"#909399\",\n  ];\n  const Ref = useRef(innerRef);\n  const transferTypeOToColor = () => {\n    let findColorTypeIndex = colorType.indexOf(type);\n    let btnType;\n    if (type && findColorTypeIndex > -1) {\n      btnType = colorTypeToHex[findColorTypeIndex];\n    } else if (type && findColorTypeIndex === -1) {\n      btnType = type;\n    } else {\n      btnType = \"#fff\";\n    }\n    return btnType;\n  };\n  const TextColor = () => {\n    let textColor;\n    if (type) {\n      textColor = \"#fff\";\n    } else {\n      textColor = \"#606266\";\n    }\n    return textColor;\n  };\n\n  const renderTypeColorByShape = () => {};\n  const renderTextColorByShape = () => {};\n  const onClick = (e) => {\n    if (disable && disable === true) {\n      e.preventDefault();\n      return;\n    }\n    if (clickEvent) {\n      return onClick(e);\n    }\n  };\n  const handleClick = () => {\n    onClick();\n  };\n  useEffect(() => {\n    console.log(props);\n  });\n\n  return (\n    <button\n      style={{\n        background: `${renderTypeColorByShape()}`,\n        color: ` ${renderTextColorByShape()}`,\n        ...style,\n      }}\n      className={`button ${shape || \"\"}`}\n      onClick={onClick}\n      ref={Ref}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n\n//props background color,  content, hover background, size,\n//icon\n//shape -> border, color\n"]},"metadata":{},"sourceType":"module"}