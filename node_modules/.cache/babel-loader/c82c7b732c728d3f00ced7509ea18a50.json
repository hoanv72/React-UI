{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/hoa/Desktop/source/React/temo-ui/src/components/Button/Button.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport \"./button.scss\";\n\nconst Button = props => {\n  _s();\n\n  const colorType = [\"primary\", \"success\", \"warning\", \"danger\", \"info\"];\n  const colorTypeToHex = [\"#409eff\", \"#67c23a\", \"#e6a23c\", \"#f56c6c\", \"#909399\"];\n  const innerRef = useRef(props.innerRef);\n\n  const renderColorType = () => {\n    let findColorTypeIndex = colorType.indexOf(props.type);\n    let btnType;\n\n    if (props.type && findColorTypeIndex > -1) {\n      btnType = colorTypeToHex[findColorTypeIndex];\n    } else if (props.type && findColorTypeIndex === -1) {\n      btnType = props.type;\n    } else {\n      btnType = \"#fff\";\n    }\n\n    return btnType;\n  };\n\n  const renderTextColor = () => {\n    let textColor;\n\n    if (props.type) {\n      textColor = \"#fff\";\n    } else {\n      textColor = \"#606266\";\n    }\n\n    return textColor;\n  };\n\n  const onClick = e => {\n    if (props.disable && props.disable === true) {\n      e.preventDefault();\n      return;\n    }\n\n    if (props.onClick) {\n      return props.onClick(e);\n    }\n  };\n\n  const handleClick = () => {\n    onClick();\n  };\n\n  useEffect(() => {\n    console.log(props);\n  });\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    style: {\n      background: `${renderColorType()}`,\n      color: `{${props.shape} === \"plain\" ? '#606266' : ${renderTextColor()}}`,\n      ...props.style\n    },\n    className: `button ${props.shape || \"\"}`,\n    onClick: onClick,\n    ref: innerRef,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Button, \"O+lDb3OxqiYoGgsGDFWmOAww4Jo=\");\n\n_c = Button;\nexport default Button; //props background color,  content, hover background, size,\n//icon\n//shape -> border, color\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/home/hoa/Desktop/source/React/temo-ui/src/components/Button/Button.js"],"names":["React","useRef","useEffect","Button","props","colorType","colorTypeToHex","innerRef","renderColorType","findColorTypeIndex","indexOf","type","btnType","renderTextColor","textColor","onClick","e","disable","preventDefault","handleClick","console","log","background","color","shape","style","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAO,eAAP;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAMC,SAAS,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,QAAlC,EAA4C,MAA5C,CAAlB;AACA,QAAMC,cAAc,GAAG,CACrB,SADqB,EAErB,SAFqB,EAGrB,SAHqB,EAIrB,SAJqB,EAKrB,SALqB,CAAvB;AAOA,QAAMC,QAAQ,GAAGN,MAAM,CAACG,KAAK,CAACG,QAAP,CAAvB;;AACA,QAAMC,eAAe,GAAG,MAAM;AAC5B,QAAIC,kBAAkB,GAAGJ,SAAS,CAACK,OAAV,CAAkBN,KAAK,CAACO,IAAxB,CAAzB;AACA,QAAIC,OAAJ;;AACA,QAAIR,KAAK,CAACO,IAAN,IAAcF,kBAAkB,GAAG,CAAC,CAAxC,EAA2C;AACzCG,MAAAA,OAAO,GAAGN,cAAc,CAACG,kBAAD,CAAxB;AACD,KAFD,MAEO,IAAIL,KAAK,CAACO,IAAN,IAAcF,kBAAkB,KAAK,CAAC,CAA1C,EAA6C;AAClDG,MAAAA,OAAO,GAAGR,KAAK,CAACO,IAAhB;AACD,KAFM,MAEA;AACLC,MAAAA,OAAO,GAAG,MAAV;AACD;;AACD,WAAOA,OAAP;AACD,GAXD;;AAYA,QAAMC,eAAe,GAAG,MAAM;AAC5B,QAAIC,SAAJ;;AACA,QAAIV,KAAK,CAACO,IAAV,EAAgB;AACdG,MAAAA,SAAS,GAAG,MAAZ;AACD,KAFD,MAEO;AACLA,MAAAA,SAAS,GAAG,SAAZ;AACD;;AACD,WAAOA,SAAP;AACD,GARD;;AASA,QAAMC,OAAO,GAAIC,CAAD,IAAO;AACrB,QAAIZ,KAAK,CAACa,OAAN,IAAiBb,KAAK,CAACa,OAAN,KAAkB,IAAvC,EAA6C;AAC3CD,MAAAA,CAAC,CAACE,cAAF;AACA;AACD;;AACD,QAAId,KAAK,CAACW,OAAV,EAAmB;AACjB,aAAOX,KAAK,CAACW,OAAN,CAAcC,CAAd,CAAP;AACD;AACF,GARD;;AASA,QAAMG,WAAW,GAAG,MAAM;AACxBJ,IAAAA,OAAO;AACR,GAFD;;AAGAb,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAZ;AACD,GAFQ,CAAT;AAIA,sBACE;AACE,IAAA,KAAK,EAAE;AACLkB,MAAAA,UAAU,EAAG,GAAEd,eAAe,EAAG,EAD5B;AAELe,MAAAA,KAAK,EAAG,IACNnB,KAAK,CAACoB,KACP,8BAA6BX,eAAe,EAAG,GAJ3C;AAKL,SAAGT,KAAK,CAACqB;AALJ,KADT;AAQE,IAAA,SAAS,EAAG,UAASrB,KAAK,CAACoB,KAAN,IAAe,EAAG,EARzC;AASE,IAAA,OAAO,EAAET,OATX;AAUE,IAAA,GAAG,EAAER,QAVP;AAAA,cAYGH,KAAK,CAACsB;AAZT;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA/DD;;GAAMvB,M;;KAAAA,M;AAiEN,eAAeA,MAAf,C,CAEA;AACA;AACA","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport \"./button.scss\";\n\nconst Button = (props) => {\n  const colorType = [\"primary\", \"success\", \"warning\", \"danger\", \"info\"];\n  const colorTypeToHex = [\n    \"#409eff\",\n    \"#67c23a\",\n    \"#e6a23c\",\n    \"#f56c6c\",\n    \"#909399\",\n  ];\n  const innerRef = useRef(props.innerRef);\n  const renderColorType = () => {\n    let findColorTypeIndex = colorType.indexOf(props.type);\n    let btnType;\n    if (props.type && findColorTypeIndex > -1) {\n      btnType = colorTypeToHex[findColorTypeIndex];\n    } else if (props.type && findColorTypeIndex === -1) {\n      btnType = props.type;\n    } else {\n      btnType = \"#fff\";\n    }\n    return btnType;\n  };\n  const renderTextColor = () => {\n    let textColor;\n    if (props.type) {\n      textColor = \"#fff\";\n    } else {\n      textColor = \"#606266\";\n    }\n    return textColor;\n  };\n  const onClick = (e) => {\n    if (props.disable && props.disable === true) {\n      e.preventDefault();\n      return;\n    }\n    if (props.onClick) {\n      return props.onClick(e);\n    }\n  };\n  const handleClick = () => {\n    onClick();\n  };\n  useEffect(() => {\n    console.log(props);\n  });\n\n  return (\n    <button\n      style={{\n        background: `${renderColorType()}`,\n        color: `{${\n          props.shape\n        } === \"plain\" ? '#606266' : ${renderTextColor()}}`,\n        ...props.style,\n      }}\n      className={`button ${props.shape || \"\"}`}\n      onClick={onClick}\n      ref={innerRef}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n\n//props background color,  content, hover background, size,\n//icon\n//shape -> border, color\n"]},"metadata":{},"sourceType":"module"}